<?php

/**
 * @file
 * Contains iq_faq.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_page_attachments_alter().
 */
function iq_faq_page_attachments_alter(array &$attachments) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {

    // Store rendered FAQ data to node.
    if (array_key_exists('faq_data', $GLOBALS) && (array_key_exists('pattern', $GLOBALS['faq_data']) && \count($GLOBALS['faq_data']['pattern']['questions']) || array_key_exists('view', $GLOBALS['faq_data']) && \count($GLOBALS['faq_data']['view']['questions']))) {

      $existingFaqData = FALSE;
      if ($node->field_iq_faq_data->value) {
        $existingFaqData = unserialize($node->field_iq_faq_data->value);
      }

      if ($existingFaqData && is_array($existingFaqData)) {
        foreach ($existingFaqData as $regionID => $faqItems) {
          if (is_array($GLOBALS['faq_data']) && !array_key_exists($regionID, $GLOBALS['faq_data'])) {
            $GLOBALS['faq_data'] = $faqItems;
          }
        }
      }

      $node->field_iq_faq_data = serialize($GLOBALS['faq_data']);
      $node->save();
    }

    if (is_array($node->field_iq_faq_data) && $node->field_iq_faq_data->value) {
      $faqRendered = unserialize($node->field_iq_faq_data->value);
      if (is_array($faqRendered)) {

        // Format the rendered FAQ items.
        $renderedFaqQuestions = [];
        foreach ($faqRendered as $regionID => $region) {
          if (is_array($region) && array_key_exists('questions', $region) && is_array($region['questions'])) {
            foreach ($region['questions'] as $key => $question) {
              $renderedFaqQuestions[] = [
                '@type' => 'Question',
                'name' => $question,
                'acceptedAnswer' => [
                  '@type' => 'Answer',
                  'text' => trim(preg_replace('/\s\s+/', ' ', $faqRendered[$regionID]['answers'][$key])),
                ],
              ];
            }
          }
        }

        // Attach rendered FAQ items to page head.
        if (count($renderedFaqQuestions)) {

          // Check for schema_qa_page_type in html head and
          // make sure it's correct.
          $schemaQaPageTypeElementKey = 0;
          $schemaQaPageTypeElement = array_filter($attachments['#attached']['html_head'], function ($headEelement) {
            return $headEelement[1] == 'schema_qa_page_type';
          });

          if (count($schemaQaPageTypeElement)) {
            $schemaQaPageTypeElementKey = array_keys($schemaQaPageTypeElement)[0];
          }

          $schemaQaPageTypeElement = [
            0 => [
              '#tag' => 'meta',
              '#attributes' => [
                'name' => '@type',
                'content' => 'FAQPage',
                'group' => 'schema_qa_page',
                'schema_metatag' => TRUE,
              ],
            ],
            1 => 'schema_qa_page_type',
          ];

          if ($schemaQaPageTypeElementKey) {
            $attachments['#attached']['html_head'][$schemaQaPageTypeElementKey] = $schemaQaPageTypeElement;
          }
          else {
            array_push($attachments['#attached']['html_head'], $schemaQaPageTypeElement);
          }

          // Check for schema_qa_page_main_entity_0. If it's there,
          // add the rendered FAQ items, otherwise create it.
          $schemaQaPageMainEntityKey = 0;
          $schemaQaPageMainEntity = array_filter($attachments['#attached']['html_head'], function ($headEelement) {
            return $headEelement[1] == 'schema_qa_page_main_entity_0';
          });

          if (count($schemaQaPageMainEntity)) {
            $schemaQaPageMainEntityKey = array_keys($schemaQaPageMainEntity)[0];
          }

          if ($schemaQaPageMainEntityKey) {
            $attachments['#attached']['html_head'][$schemaQaPageMainEntityKey][0]['#attributes']['content'] = array_merge($attachments['#attached']['html_head'][$schemaQaPageMainEntityKey][0]['#attributes']['content'], $renderedFaqQuestions);
          }
          else {
            array_push($attachments['#attached']['html_head'], [
              0 => [
                '#tag' => 'meta',
                '#attributes' => [
                  'name' => 'mainEntity',
                  'content' => $renderedFaqQuestions,
                  'group' => 'schema_qa_page',
                  'schema_metatag' => TRUE,
                ],
              ],
              1 => 'schema_qa_page_main_entity_0',
            ]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function iq_faq_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  if (array_key_exists('field_pagedesigner_content', $build)) {

    if (!array_key_exists('faq_data', $GLOBALS)) {
      $GLOBALS['faq_data'] = [
        'pattern' => [
          'questions' => [],
          'answers' => [],
        ],
      ];
    }

    if (!array_key_exists('pattern', $GLOBALS['faq_data'])) {
      $GLOBALS['faq_data']['pattern'] = [
        'questions' => [],
        'answers' => [],
      ];
    }

    $faqPatterns = _recursive_search_faq_pattern($build['field_pagedesigner_content'][0], [
      'questions' => [],
      'answers' => [],
    ]);
    $GLOBALS['faq_data']['pattern']['questions'] = array_merge($GLOBALS['faq_data']['pattern']['questions'], $faqPatterns['questions']);
    $GLOBALS['faq_data']['pattern']['answers'] = array_merge($GLOBALS['faq_data']['pattern']['answers'], $faqPatterns['answers']);
  }
}

/**
 * Private function to recursivle seach FAQ patterns.
 */
function _recursive_search_faq_pattern($array, $return = []) {
  foreach ($array as $element) {
    if (is_array($element) && array_key_exists('#pagedesigner_entity', $element) && $element['#pagedesigner_entity']->getHandlerType() == 'row') {
      if (array_key_exists('#fields', $element)) {
        foreach ($element['#fields'] as $columnElement) {
          $return = _recursive_search_faq_pattern($columnElement, $return);
        }
      }
    }
    if (is_array($element) && array_key_exists('#id', $element) && $element['#id'] == 'iq-faq-item') {
      if (!in_array($element['#fields']['question']['#markup'], $return['questions'])) {
        $return['questions'][] = $element['#fields']['question']['#markup'];
        $return['answers'][] = strip_tags($element['#fields']['answer']['#text']);
      }
    }
  }
  return $return;
}

/**
 * Implements hook_views_pre_render().
 */
function iq_faq_views_pre_render($view) {

  if ($view->id() == 'iq_faq') {
    if (!array_key_exists('faq_data', $GLOBALS)) {
      $GLOBALS['faq_data'] = [
        'view' => [
          'questions' => [],
          'answers' => [],
        ],
      ];
    }

    if (!array_key_exists('view', $GLOBALS['faq_data'])) {
      $GLOBALS['faq_data']['view'] = [
        'questions' => [],
        'answers' => [],
      ];
    }

    foreach ($view->result as $result) {
      if (get_class($result->_entity) == 'Drupal\node\Entity\Node' && $result->_entity->getType() == 'iq_faq' && !in_array($result->_entity->title->value, $GLOBALS['faq_data']['view']['questions'])) {
        $GLOBALS['faq_data']['view']['questions'][] = $result->_entity->title->value;
        $GLOBALS['faq_data']['view']['answers'][] = strip_tags($result->_entity->field_iq_answer->value);
      }
    }
  }
}
